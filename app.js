class ValutCalc {
    constructor() {
        this.exchangeRates = {};
        this.activeCurrency = 'USD';
        this.currentValue = '1';
        this.baseCurrency = 'USD';
        this.isDarkTheme = true; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ç–µ–º–Ω–∞—è —Ç–µ–º–∞
        this.updateAvailable = false;
        this.serviceWorkerRegistration = null;
        this.deferredPrompt = null;
        this.canInstall = false;
        this.isInstalled = false;
        this.selectedCurrencies = ['USD', 'EUR']; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é USD –∏ EUR
        this.hasUserInput = false; // –§–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –Ω–∞—á–∞–ª–∞ –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        this.currentScreen = 'main'; // –¢–µ–∫—É—â–∏–π —ç–∫—Ä–∞–Ω: 'main', 'settings', 'currency-settings'
        this.navigationStack = []; // –°—Ç–µ–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        this.currentLanguage = 'en'; // –¢–µ–∫—É—â–∏–π —è–∑—ã–∫: 'en' –∏–ª–∏ 'ru'
        
        // –°–∏—Å—Ç–µ–º–∞ –ø–µ—Ä–µ–≤–æ–¥–æ–≤
        this.translations = {
            en: {
                // Main interface
                'settings': 'Settings',
                'language': 'Language',
                'selectLanguage': 'Select Language',
                'application': 'Application',
                'refreshRates': 'Refresh Exchange Rates',
                'lastUpdated': 'Last updated:',
                'theme': 'Theme',
                'dark': 'Dark',
                'light': 'Light',
                'green': 'Green',
                'blue': 'Blue',
                'purple': 'Purple',
                'red': 'Red',
                'about': 'About',
                'version': 'ValutCalc v1.0.3',
                'description': 'Currency converter with PWA support',
                'installApp': 'Install App',
                'updateApp': 'Update App',
                'checkUpdates': 'Check for updates',
                'currencySettings': 'Currency Settings',
                'currentCurrencies': 'Current Currencies',
                'availableCurrencies': 'Available Currencies',
                'addCurrency': 'Add Currency',
                'removeCurrency': 'Remove Currency',
                'supportDeveloper': 'Support Developer',
                'donateDescription': 'If you like this app, please consider supporting the developer',
                'koFi': 'Ko-fi',
                'paypal': 'PayPal',
                'bitcoin': 'Bitcoin',
                'bitcoinCopied': 'Bitcoin address copied to clipboard!',
                'onlyNumbers': 'Only numbers can be pasted',
                'noCurrencySelected': 'No currency selected for pasting',
                'updateError': 'Update error:',
                'loading': 'Loading...',
                'error': 'Error',
                'success': 'Success',
                'cancel': 'Cancel',
                'ok': 'OK',
                'close': 'Close',
                'thankYou': 'Thank you for your support!',
                'cryptoDonation': 'Crypto donation'
            },
            ru: {
                // Main interface
                'settings': '–ù–∞—Å—Ç—Ä–æ–π–∫–∏',
                'language': '–Ø–∑—ã–∫',
                'selectLanguage': '–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫',
                'application': '–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ',
                'refreshRates': '–û–±–Ω–æ–≤–∏—Ç—å –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç',
                'lastUpdated': '–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:',
                'theme': '–¢–µ–º–∞',
                'dark': '–¢—ë–º–Ω–∞—è',
                'light': '–°–≤–µ—Ç–ª–∞—è',
                'green': '–ó–µ–ª—ë–Ω–∞—è',
                'blue': '–°–∏–Ω—è—è',
                'purple': '–§–∏–æ–ª–µ—Ç–æ–≤–∞—è',
                'red': '–ö—Ä–∞—Å–Ω–∞—è',
                'about': '–û –ø—Ä–æ–≥—Ä–∞–º–º–µ',
                'version': 'ValutCalc v1.0.3',
                'description': '–ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –≤–∞–ª—é—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π PWA',
                'installApp': '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ',
                'updateApp': '–û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ',
                'checkUpdates': '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è',
                'currencySettings': '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∞–ª—é—Ç',
                'currentCurrencies': '–¢–µ–∫—É—â–∏–µ –≤–∞–ª—é—Ç—ã',
                'availableCurrencies': '–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞–ª—é—Ç—ã',
                'addCurrency': '–î–æ–±–∞–≤–∏—Ç—å –≤–∞–ª—é—Ç—É',
                'removeCurrency': '–£–¥–∞–ª–∏—Ç—å –≤–∞–ª—é—Ç—É',
                'supportDeveloper': '–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞',
                'donateDescription': '–ï—Å–ª–∏ –≤–∞–º –Ω—Ä–∞–≤–∏—Ç—Å—è —ç—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞',
                'koFi': 'Ko-fi',
                'paypal': 'PayPal',
                'bitcoin': 'Bitcoin',
                'bitcoinCopied': 'Bitcoin –∞–¥—Ä–µ—Å —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!',
                'onlyNumbers': '–ú–æ–∂–Ω–æ –≤—Å—Ç–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ',
                'noCurrencySelected': '–ù–µ –≤—ã–±—Ä–∞–Ω–∞ –≤–∞–ª—é—Ç–∞ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏',
                'updateError': '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:',
                'loading': '–ó–∞–≥—Ä—É–∑–∫–∞...',
                'error': '–û—à–∏–±–∫–∞',
                'success': '–£—Å–ø–µ—à–Ω–æ',
                'cancel': '–û—Ç–º–µ–Ω–∞',
                'ok': '–û–ö',
                'close': '–ó–∞–∫—Ä—ã—Ç—å',
                'thankYou': 'üôè –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É!',
                'cryptoDonation': '–ö—Ä–∏–ø—Ç–æ–¥–æ–Ω–∞—Ç'
            }
        };
        this.availableCurrencies = {
            // Major currencies
            'USD': 'US Dollar',
            'EUR': 'Euro',
            'GBP': 'British Pound Sterling',
            'JPY': 'Japanese Yen',
            'AUD': 'Australian Dollar',
            'CAD': 'Canadian Dollar',
            'CHF': 'Swiss Franc',
            'CNY': 'Chinese Yuan',
            'SEK': 'Swedish Krona',
            'NZD': 'New Zealand Dollar',
            'NOK': 'Norwegian Krone',
            'KRW': 'South Korean Won',
            'SGD': 'Singapore Dollar',
            'HKD': 'Hong Kong Dollar',
            'DKK': 'Danish Krone',
            'PLN': 'Polish Zloty',
            'CZK': 'Czech Koruna',
            'HUF': 'Hungarian Forint',
            
            // Asian currencies
            'INR': 'Indian Rupee',
            'THB': 'Thai Baht',
            'MYR': 'Malaysian Ringgit',
            'IDR': 'Indonesian Rupiah',
            'PHP': 'Philippine Peso',
            'VND': 'Vietnamese Dong',
            'TWD': 'New Taiwan Dollar',
            'PKR': 'Pakistani Rupee',
            'LKR': 'Sri Lankan Rupee',
            'BDT': 'Bangladeshi Taka',
            'NPR': 'Nepalese Rupee',
            'MMK': 'Myanmar Kyat',
            'KHR': 'Cambodian Riel',
            'LAK': 'Lao Kip',
            'MOP': 'Macanese Pataca',
            'BND': 'Brunei Dollar',
            
            // Middle East & Africa
            'AED': 'UAE Dirham',
            'SAR': 'Saudi Riyal',
            'QAR': 'Qatari Riyal',
            'KWD': 'Kuwaiti Dinar',
            'BHD': 'Bahraini Dinar',
            'OMR': 'Omani Rial',
            'JOD': 'Jordanian Dinar',
            'LBP': 'Lebanese Pound',
            'EGP': 'Egyptian Pound',
            'TRY': 'Turkish Lira',
            'ILS': 'Israeli Shekel',
            'IRR': 'Iranian Rial',
            'AFN': 'Afghan Afghani',
            'IQD': 'Iraqi Dinar',
            'SYP': 'Syrian Pound',
            'YER': 'Yemeni Rial',
            
            // African currencies
            'ZAR': 'South African Rand',
            'MAD': 'Moroccan Dirham',
            'TND': 'Tunisian Dinar',
            'DZD': 'Algerian Dinar',
            'LYD': 'Libyan Dinar',
            'EGP': 'Egyptian Pound',
            'ETB': 'Ethiopian Birr',
            'KES': 'Kenyan Shilling',
            'TZS': 'Tanzanian Shilling',
            'UGX': 'Ugandan Shilling',
            'RWF': 'Rwandan Franc',
            'BIF': 'Burundian Franc',
            'DJF': 'Djiboutian Franc',
            'SOS': 'Somali Shilling',
            'XOF': 'West African CFA Franc',
            'XAF': 'Central African CFA Franc',
            'GHS': 'Ghanaian Cedi',
            'NGN': 'Nigerian Naira',
            'XOF': 'West African CFA Franc',
            'GMD': 'Gambian Dalasi',
            'GNF': 'Guinean Franc',
            'LRD': 'Liberian Dollar',
            'SLL': 'Sierra Leonean Leone',
            'CVE': 'Cape Verdean Escudo',
            'STN': 'S√£o Tom√© and Pr√≠ncipe Dobra',
            'MRU': 'Mauritanian Ouguiya',
            'SHP': 'Saint Helena Pound',
            'FKP': 'Falkland Islands Pound',
            
            // Europe
            'RON': 'Romanian Leu',
            'BGN': 'Bulgarian Lev',
            'HRK': 'Croatian Kuna',
            'RSD': 'Serbian Dinar',
            'BAM': 'Bosnia-Herzegovina Convertible Mark',
            'MKD': 'Macedonian Denar',
            'ALL': 'Albanian Lek',
            'MDL': 'Moldovan Leu',
            'UAH': 'Ukrainian Hryvnia',
            'BYN': 'Belarusian Ruble',
            'RUB': 'Russian Ruble',
            'GEL': 'Georgian Lari',
            'AMD': 'Armenian Dram',
            'AZN': 'Azerbaijani Manat',
            'KZT': 'Kazakhstani Tenge',
            'KGS': 'Kyrgyzstani Som',
            'UZS': 'Uzbekistani Som',
            'TJS': 'Tajikistani Somoni',
            'TMT': 'Turkmenistani Manat',
            
            // Americas
            'BRL': 'Brazilian Real',
            'ARS': 'Argentine Peso',
            'CLP': 'Chilean Peso',
            'COP': 'Colombian Peso',
            'PEN': 'Peruvian Sol',
            'UYU': 'Uruguayan Peso',
            'PYG': 'Paraguayan Guarani',
            'BOB': 'Bolivian Boliviano',
            'VES': 'Venezuelan Bol√≠var',
            'GYD': 'Guyanese Dollar',
            'SRD': 'Surinamese Dollar',
            'MXN': 'Mexican Peso',
            'GTQ': 'Guatemalan Quetzal',
            'BZD': 'Belize Dollar',
            'SVC': 'Salvadoran Col√≥n',
            'HNL': 'Honduran Lempira',
            'NIO': 'Nicaraguan C√≥rdoba',
            'CRC': 'Costa Rican Col√≥n',
            'PAB': 'Panamanian Balboa',
            'JMD': 'Jamaican Dollar',
            'HTG': 'Haitian Gourde',
            'DOP': 'Dominican Peso',
            'CUP': 'Cuban Peso',
            'BBD': 'Barbadian Dollar',
            'TTD': 'Trinidad & Tobago Dollar',
            'XCD': 'East Caribbean Dollar',
            'AWG': 'Aruban Florin',
            'ANG': 'Netherlands Antillean Guilder',
            'KYD': 'Cayman Islands Dollar',
            'BMD': 'Bermudian Dollar',
            'BSD': 'Bahamian Dollar',
            
            // Oceania
            'FJD': 'Fijian Dollar',
            'PGK': 'Papua New Guinean Kina',
            'SBD': 'Solomon Islands Dollar',
            'VUV': 'Vanuatu Vatu',
            'WST': 'Samoan Tala',
            'TOP': 'Tongan Pa ªanga',
            'TVD': 'Tuvaluan Dollar',
            'KID': 'Kiribati Dollar',
            'NRU': 'Nauruan Dollar',
            'MOP': 'Macanese Pataca',
            
            // Special currencies
            'XDR': 'Special Drawing Rights',
            'XAG': 'Silver Ounce',
            'XAU': 'Gold Ounce',
            'XPD': 'Palladium Ounce',
            'XPT': 'Platinum Ounce'
        };
        
        this.init();
    }

    async init() {
        console.log('ValutCalc initializing...');
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —è–∑—ã–∫
        this.loadLanguage();
        
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—á–∏—â–∞–µ–º –∫–µ—à Service Worker
        if ('serviceWorker' in navigator) {
            try {
                const registrations = await navigator.serviceWorker.getRegistrations();
                for (let registration of registrations) {
                    await registration.unregister();
                    console.log('Service Worker unregistered');
                }
            } catch (error) {
                console.log('No Service Worker to unregister');
            }
        }
        
        // –û—á–∏—â–∞–µ–º –∫–µ—à –±—Ä–∞—É–∑–µ—Ä–∞ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏
        if ('caches' in window) {
            try {
                const cacheNames = await caches.keys();
                await Promise.all(
                    cacheNames.map(cacheName => caches.delete(cacheName))
                );
                console.log('Browser cache cleared');
            } catch (error) {
                console.log('No cache to clear');
            }
        }
        
        this.loadTheme();
        this.loadSelectedCurrencies();
        this.setupEventListeners();
        this.setupBackButtonHandling();
        await this.loadExchangeRates();
        this.updateDisplay();
        this.checkForUpdates();
        this.setupPWAInstall();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        const settingsModal = document.getElementById('settingsModal');
        const settingsBtn = document.getElementById('settingsBtn');
        console.log('Settings modal on init:', settingsModal);
        console.log('Settings button on init:', settingsBtn);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–Ω–æ–ø–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–∞–π–¥–µ–Ω–∞
        if (settingsBtn) {
            console.log('Settings button found');
        } else {
            console.error('Settings button not found!');
        }
    }

    setupEventListeners() {
        // –ö–ª–∏–∫–∏ –ø–æ –≤–∞–ª—é—Ç–∞–º
        document.querySelectorAll('.currency-row').forEach(row => {
            row.addEventListener('click', () => {
                this.setActiveCurrency(row.dataset.currency);
            });
            
            // –î–æ–ª–≥–æ–µ –Ω–∞–∂–∞—Ç–∏–µ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é
            this.setupLongPress(row);
        });

        // –¶–∏—Ñ—Ä–æ–≤–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
        document.querySelectorAll('.key').forEach(key => {
            key.addEventListener('click', () => {
                this.handleKeyPress(key.dataset.key);
            });
        });

        // –ë–æ–∫–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏
        document.querySelector('.clear-btn').addEventListener('click', () => {
            this.clearAll();
        });

        document.querySelector('.delete-btn').addEventListener('click', () => {
            this.deleteLastDigit();
        });

        // –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
        document.addEventListener('keydown', (e) => {
            this.handleKeyboardInput(e);
        });


        // –ö–Ω–æ–ø–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        document.getElementById('settingsBtn').addEventListener('click', () => {
            console.log('Settings button clicked');
            this.openSettings();
        });

        // –ó–∞–∫—Ä—ã—Ç–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        document.getElementById('settingsClose').addEventListener('click', () => {
            this.closeSettings();
        });

        // –ö–Ω–æ–ø–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏
        document.getElementById('installBtn').addEventListener('click', () => {
            this.installApp();
        });

        // –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö
        document.getElementById('updateBtnSettings').addEventListener('click', () => {
            this.updateApp();
        });

        // –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç
        document.getElementById('refreshRatesBtn').addEventListener('click', () => {
            this.refreshExchangeRates();
        });

        // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–µ–º—ã –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö
        document.querySelectorAll('input[name="theme"]').forEach(radio => {
            radio.addEventListener('change', (e) => {
                this.changeTheme(e.target.value);
            });
        });

        // –ö–Ω–æ–ø–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∞–ª—é—Ç
        document.getElementById('currencySettingsBtn').addEventListener('click', () => {
            this.openCurrencySettings();
        });

        // –ó–∞–∫—Ä—ã—Ç–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤–∞–ª—é—Ç
        document.getElementById('currencySettingsClose').addEventListener('click', () => {
            this.closeCurrencySettings();
        });

        // –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –≤–∞–ª—é—Ç
        document.getElementById('copyValueBtn').addEventListener('click', () => {
            this.copyCurrencyValue();
        });

        document.getElementById('pasteValueBtn').addEventListener('click', () => {
            this.pasteCurrencyValue();
        });

        // –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
        document.getElementById('supportArea').addEventListener('click', () => {
            this.openSupportModal();
        });

        document.getElementById('supportModalClose').addEventListener('click', () => {
            this.closeSupportModal();
        });

        // –ö–Ω–æ–ø–∫–∞ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
        document.getElementById('languageBtn').addEventListener('click', () => {
            this.openLanguageModal();
        });

        document.getElementById('languageModalClose').addEventListener('click', () => {
            this.closeLanguageModal();
        });

        // –í—ã–±–æ—Ä —è–∑—ã–∫–∞
        document.querySelectorAll('.language-option').forEach(option => {
            option.addEventListener('click', () => {
                const lang = option.dataset.lang;
                this.setLanguage(lang);
                this.closeLanguageModal();
            });
        });

        // –ó–∞–∫—Ä—ã—Ç–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –µ–≥–æ
        document.addEventListener('click', (e) => {
            const contextMenu = document.getElementById('currencyContextMenu');
            if (contextMenu && !contextMenu.contains(e.target) && !e.target.closest('.currency-row')) {
                this.hideContextMenu();
            }
        });
    }

    async loadExchangeRates() {
        const loading = document.getElementById('loading');
        const error = document.getElementById('error');
        
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–∫—Ä—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —á–µ—Ä–µ–∑ 15 —Å–µ–∫—É–Ω–¥
        const forceHideTimeout = setTimeout(() => {
            loading.classList.add('hidden');
            error.style.display = 'block';
            error.textContent = 'Loading timeout. Using fallback rates.';
            setTimeout(() => {
                error.style.display = 'none';
            }, 5000);
        }, 15000);
        
        try {
            // –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ –∫—ç—à–∞
            const cachedRates = this.getCachedRates();
            if (cachedRates && this.isCacheValid(cachedRates.timestamp)) {
                this.exchangeRates = cachedRates.rates;
                clearTimeout(forceHideTimeout);
                loading.classList.add('hidden');
                return;
            }

            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å API —Å —Ç–∞–π–º–∞—É—Ç–æ–º
            const controller = new AbortController();
            const timeoutId = setTimeout(() => controller.abort(), 10000); // 10 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
            
            const response = await fetch('https://api.exchangerate-api.com/v4/latest/USD', {
                signal: controller.signal
            });
            
            clearTimeout(timeoutId);
            
            if (!response.ok) {
                throw new Error('API request failed');
            }

            const data = await response.json();
            this.exchangeRates = data.rates;

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
            this.cacheRates(this.exchangeRates);
            
            clearTimeout(forceHideTimeout);
            loading.classList.add('hidden');
        } catch (err) {
            console.error('Error loading exchange rates:', err);
            
            // –ü—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            const cachedRates = this.getCachedRates();
            if (cachedRates) {
                this.exchangeRates = cachedRates.rates;
                clearTimeout(forceHideTimeout);
                error.style.display = 'block';
                error.textContent = 'Using cached rates. Check your internet connection.';
                setTimeout(() => {
                    error.style.display = 'none';
                }, 5000);
            } else {
                // Fallback –∫—É—Ä—Å—ã (–ø—Ä–∏–º–µ—Ä–Ω—ã–µ)
                this.exchangeRates = {
                    USD: 1,
                    EUR: 0.85,
                    GBP: 0.75,
                    JPY: 150,
                    AUD: 1.50,
                    CAD: 1.35,
                    CHF: 0.90,
                    CNY: 7.20,
                    SEK: 10.50,
                    NZD: 1.60,
                    NOK: 10.80,
                    KRW: 1300,
                    SGD: 1.35,
                    HKD: 7.80,
                    DKK: 6.30,
                    PLN: 4.00,
                    CZK: 22.50,
                    HUF: 350,
                    INR: 83.50,
                    THB: 35.50,
                    MYR: 4.70,
                    IDR: 15500,
                    PHP: 56.50,
                    VND: 24000,
                    TWD: 31.50,
                    PKR: 280,
                    BDT: 110,
                    AED: 3.67,
                    SAR: 3.75,
                    QAR: 3.64,
                    KWD: 0.31,
                    BHD: 0.38,
                    OMR: 0.38,
                    JOD: 0.71,
                    ILS: 3.70,
                    TRY: 30.0,
                    ZAR: 18.50,
                    EGP: 31.0,
                    MAD: 10.20,
                    NGN: 820,
                    KES: 150,
                    GHS: 12.50,
                    RON: 4.50,
                    BGN: 1.66,
                    HRK: 6.40,
                    RSD: 100,
                    UAH: 37.0,
                    BYN: 3.2,
                    RUB: 95.0,
                    GEL: 2.65,
                    AMD: 390,
                    AZN: 1.7,
                    KZT: 450,
                    UZS: 12000,
                    BRL: 5.20,
                    ARS: 850,
                    CLP: 920,
                    COP: 4200,
                    PEN: 3.75,
                    MXN: 17.50,
                    XAU: 0.0005,  // Gold
                    XAG: 0.04,    // Silver
                    XDR: 0.75     // SDR
                };
                error.style.display = 'block';
                error.textContent = 'Using approximate rates. Check your internet connection.';
            }
            
            clearTimeout(forceHideTimeout);
            loading.classList.add('hidden');
        }
    }


    getCachedRates() {
        try {
            const cached = localStorage.getItem('valutcalc_rates');
            return cached ? JSON.parse(cached) : null;
        } catch {
            return null;
        }
    }

    cacheRates(rates) {
        try {
            const data = {
                rates: rates,
                timestamp: Date.now()
            };
            localStorage.setItem('valutcalc_rates', JSON.stringify(data));
        } catch (err) {
            console.warn('Failed to save rates to cache:', err);
        }
    }

    isCacheValid(timestamp) {
        const CACHE_DURATION = 24 * 60 * 60 * 1000; // 24 —á–∞—Å–∞
        return Date.now() - timestamp < CACHE_DURATION;
    }

    setActiveCurrency(currency) {
        this.activeCurrency = currency;
        this.currentValue = '1';
        this.hasUserInput = false; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –ø—Ä–∏ —Å–º–µ–Ω–µ –≤–∞–ª—é—Ç—ã
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å—Ç—Ä–æ–∫—É
        document.querySelectorAll('.currency-row').forEach(row => {
            row.classList.remove('active');
        });
        document.querySelector(`[data-currency="${currency}"]`).classList.add('active');
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        this.updateDisplay();
    }

    handleKeyPress(key) {
        if (key === '.') {
            this.addDecimalPoint();
        } else if (key === '00') {
            this.addDoubleZero();
        } else {
            this.addDigit(key);
        }
    }

    handleKeyboardInput(e) {
        e.preventDefault();
        
        if (e.key >= '0' && e.key <= '9') {
            this.addDigit(e.key);
        } else if (e.key === '.' || e.key === ',') {
            this.addDecimalPoint();
        } else if (e.key === 'Backspace') {
            this.deleteLastDigit();
        } else if (e.key === 'Escape' || e.key === 'c' || e.key === 'C') {
            this.clearAll();
        } else if (e.key === 'Enter') {
            // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É –≤–∞–ª—é—Ç–∞–º–∏
            this.switchToNextCurrency();
        }
    }

    addDigit(digit) {
        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ –Ω–∞—á–∏–Ω–∞–ª –≤–≤–æ–¥–∏—Ç—å (–ø–æ–ª–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–µ—Ñ–æ–ª—Ç–Ω—É—é "1")
        if (!this.hasUserInput && this.currentValue === '1') {
            this.currentValue = digit;
            this.hasUserInput = true;
        } else if (this.currentValue === '0') {
            this.currentValue = digit;
            this.hasUserInput = true;
        } else {
            this.currentValue += digit;
            this.hasUserInput = true;
        }
        this.updateDisplay();
    }

    addDecimalPoint() {
        if (!this.currentValue.includes('.')) {
            this.currentValue += '.';
            this.updateDisplay();
        }
    }

    addDoubleZero() {
        // –ï—Å–ª–∏ —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ "1" (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é), –∑–∞–º–µ–Ω—è–µ–º –µ–≥–æ –Ω–∞ "100"
        if (this.currentValue === '1') {
            this.currentValue = '100';
        } else if (this.currentValue === '0') {
            this.currentValue = '0.00';
        } else {
            this.currentValue += '00';
        }
        this.updateDisplay();
    }

    deleteLastDigit() {
        if (this.currentValue.length > 1) {
            this.currentValue = this.currentValue.slice(0, -1);
        } else {
            // –ü—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ü–∏—Ñ—Ä—ã –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –∑–Ω–∞—á–µ–Ω–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é "1"
            this.currentValue = '1';
        }
        this.updateDisplay();
    }

    clearAll() {
        this.currentValue = '1';
        this.hasUserInput = false; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ
        this.updateDisplay();
    }

    switchToNextCurrency() {
        const currencies = ['USD', 'EUR', 'AZN'];
        const currentIndex = currencies.indexOf(this.activeCurrency);
        const nextIndex = (currentIndex + 1) % currencies.length;
        this.setActiveCurrency(currencies[nextIndex]);
    }

    updateDisplay() {
        const value = parseFloat(this.currentValue) || 0;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–∞–ª—é—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö
        this.updateCurrencyRows();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ –≤–∞–ª—é—Ç—ã
        document.querySelectorAll('.currency-row').forEach(row => {
            const currency = row.dataset.currency;
            const currencyValue = this.convertCurrency(value, this.activeCurrency, currency);
            const formattedValue = this.formatValue(currencyValue);
            row.querySelector('.currency-value').textContent = formattedValue;
        });
    }

    updateCurrencyRows() {
        const currencySection = document.querySelector('.currency-section');
        currencySection.innerHTML = '';

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        const isCompactMode = this.selectedCurrencies.length > 8;
        
        if (isCompactMode) {
            currencySection.classList.add('compact-mode');
        } else {
            currencySection.classList.remove('compact-mode');
        }

        this.selectedCurrencies.forEach(currencyCode => {
            const currencyName = this.getCurrencyName(currencyCode);
            const isActive = currencyCode === this.activeCurrency;
            
            const currencyRow = document.createElement('div');
            currencyRow.className = `currency-row ${isActive ? 'active' : ''}`;
            currencyRow.dataset.currency = currencyCode;
            
            if (isCompactMode) {
                // –ö–æ–º–ø–∞–∫—Ç–Ω—ã–π —Ä–µ–∂–∏–º: —Ç–æ–ª—å–∫–æ –∞–±–±—Ä–µ–≤–∏–∞—Ç—É—Ä–∞ –∏ —Ü–∏—Ñ—Ä—ã
                currencyRow.innerHTML = `
                    <div class="currency-code-compact">${currencyCode}</div>
                    <div class="currency-value">0</div>
                `;
            } else {
                // –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º: –ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –∞–±–±—Ä–µ–≤–∏–∞—Ç—É—Ä–∞
                currencyRow.innerHTML = `
                    <div class="currency-info">
                        <div class="currency-name">${currencyName}</div>
                        <div class="currency-code">${currencyCode}</div>
                    </div>
                    <div class="currency-value">0</div>
                `;
            }
            
            // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞
            currencyRow.addEventListener('click', () => {
                this.setActiveCurrency(currencyCode);
            });
            
            // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ª–≥–æ–µ –Ω–∞–∂–∞—Ç–∏–µ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é
            this.setupLongPress(currencyRow);
            
            currencySection.appendChild(currencyRow);
        });
    }

    convertCurrency(amount, fromCurrency, toCurrency) {
        if (fromCurrency === toCurrency) {
            return amount;
        }

        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ USD, –∑–∞—Ç–µ–º –≤ —Ü–µ–ª–µ–≤—É—é –≤–∞–ª—é—Ç—É
        let usdAmount = amount;
        if (fromCurrency !== 'USD') {
            usdAmount = amount / this.exchangeRates[fromCurrency];
        }

        if (toCurrency === 'USD') {
            return usdAmount;
        }

        return usdAmount * this.exchangeRates[toCurrency];
    }

    formatValue(value) {
        if (value === 0) return '0';
        
        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å 2 –∑–Ω–∞–∫–∞–º–∏ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π –∏ –ø—Ä–æ–±–µ–ª–∞–º–∏ –¥–ª—è —Ç—ã—Å—è—á
        const formatted = value.toFixed(2);
        const parts = formatted.split('.');
        parts[0] = parts[0].replace(/\B(?=(\d{3})+(?!\d))/g, ' ');
        return parts.join('.');
    }

    loadTheme() {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é —Ç–µ–º—É –∏–∑ localStorage
        const savedTheme = localStorage.getItem('valutcalc_theme') || 'dark';
        this.changeTheme(savedTheme);
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π radio button
        const themeRadio = document.querySelector(`input[name="theme"][value="${savedTheme}"]`);
        if (themeRadio) {
            themeRadio.checked = true;
        }
    }

    toggleTheme() {
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ç–µ–º—É
        const currentTheme = localStorage.getItem('valutcalc_theme') || 'dark';
        
        // –£–º–Ω–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ: —Ç–µ–º–Ω—ã–µ —Ç–µ–º—ã ‚Üí Light, Light ‚Üí Dark
        if (currentTheme === 'light') {
            this.changeTheme('dark');
        } else {
            this.changeTheme('light');
        }
    }

    async checkForUpdates() {
        if ('serviceWorker' in navigator) {
            try {
                const registration = await navigator.serviceWorker.getRegistration();
                if (registration) {
                    this.serviceWorkerRegistration = registration;
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                    await registration.update();
                    
                    // –°–ª—É—à–∞–µ–º —Å–æ–±—ã—Ç–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                    registration.addEventListener('updatefound', () => {
                        this.showUpdateButton();
                    });
                }
            } catch (error) {
                console.log('Error checking for updates:', error);
            }
        }
    }

    showUpdateButton() {
        const updateBtn = document.getElementById('updateBtn');
        updateBtn.style.display = 'flex';
        this.updateAvailable = true;
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        this.showUpdateNotification();
    }

    showUpdateNotification() {
        // –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –¥–æ—Å—Ç—É–ø–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
        const notification = document.createElement('div');
        notification.className = 'update-notification';
        notification.innerHTML = `
            <div class="update-notification-content">
                <span>App update available</span>
                <button class="update-notification-btn" onclick="this.parentElement.parentElement.remove()">√ó</button>
            </div>
        `;
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        notification.style.cssText = `
            position: fixed;
            top: 80px;
            left: 20px;
            right: 20px;
            background: rgba(255, 107, 53, 0.9);
            color: white;
            padding: 12px 16px;
            border-radius: 8px;
            z-index: 1000;
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 107, 53, 0.3);
        `;
        
        document.body.appendChild(notification);
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫—Ä—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
        setTimeout(() => {
            if (notification.parentElement) {
                notification.remove();
            }
        }, 5000);
    }

    openSettings() {
        console.log('Opening settings modal');
        const modal = document.getElementById('settingsModal');
        console.log('Modal element:', modal);
        if (modal) {
            modal.style.display = 'flex';
            console.log('Modal display set to flex');
        } else {
            console.error('Settings modal not found!');
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å—Ç–µ–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        this.navigationStack.push(this.currentScreen);
        this.currentScreen = 'settings';
        
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        setTimeout(() => {
            this.translateInterface();
            this.translateAllElements();
        }, 50);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
        this.updateSettingsButtons();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫—É—Ä—Å–æ–≤
        this.updateLastUpdateTime();
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é —Ç–µ–º—É
        const currentTheme = this.isDarkTheme ? 'dark' : 'light';
        document.querySelector(`input[name="theme"][value="${currentTheme}"]`).checked = true;
    }

    closeSettings() {
        const modal = document.getElementById('settingsModal');
        modal.style.display = 'none';
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —ç–∫—Ä–∞–Ω—É
        if (this.navigationStack.length > 0) {
            this.currentScreen = this.navigationStack.pop();
        } else {
            this.currentScreen = 'main';
        }
    }

    updateSettingsButtons() {
        const installBtn = document.getElementById('installBtn');
        const updateBtn = document.getElementById('updateBtnSettings');
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –µ—Å–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ò –º–æ–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å
        if (!this.isInstalled && (this.canInstall || this.deferredPrompt)) {
            installBtn.style.display = 'flex';
            installBtn.innerHTML = `
                <svg width="20" height="20" viewBox="0 0 24 24" fill="none">
                    <path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4" stroke="currentColor" stroke-width="2"/>
                    <polyline points="7,10 12,15 17,10" stroke="currentColor" stroke-width="2"/>
                    <line x1="12" y1="15" x2="12" y2="3" stroke="currentColor" stroke-width="2"/>
                </svg>
                Install App
            `;
        } else if (!this.isInstalled) {
            // –ï—Å–ª–∏ –Ω–µ–ª—å–∑—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏
            installBtn.style.display = 'flex';
            installBtn.innerHTML = `
                <svg width="20" height="20" viewBox="0 0 24 24" fill="none">
                    <path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4" stroke="currentColor" stroke-width="2"/>
                    <polyline points="7,10 12,15 17,10" stroke="currentColor" stroke-width="2"/>
                    <line x1="12" y1="15" x2="12" y2="3" stroke="currentColor" stroke-width="2"/>
                </svg>
                Install App
            `;
        } else {
            installBtn.style.display = 'none';
        }
        
        // –í—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        updateBtn.style.display = 'flex';
        if (this.updateAvailable) {
            updateBtn.innerHTML = `
                <svg width="20" height="20" viewBox="0 0 24 24" fill="none">
                    <path d="M1 4v6h6" stroke="currentColor" stroke-width="2"/>
                    <path d="M23 20v-6h-6" stroke="currentColor" stroke-width="2"/>
                    <path d="M20.49 9A9 9 0 0 0 5.64 5.64L1 10m22 4l-4.64 4.36A9 9 0 0 1 3.51 15" stroke="currentColor" stroke-width="2"/>
                </svg>
                Update App
            `;
        } else {
            updateBtn.innerHTML = `
                <svg width="20" height="20" viewBox="0 0 24 24" fill="none">
                    <path d="M1 4v6h6" stroke="currentColor" stroke-width="2"/>
                    <path d="M23 20v-6h-6" stroke="currentColor" stroke-width="2"/>
                    <path d="M20.49 9A9 9 0 0 0 5.64 5.64L1 10m22 4l-4.64 4.36A9 9 0 0 1 3.51 15" stroke="currentColor" stroke-width="2"/>
                </svg>
                Check for updates
            `;
        }
    }

    async installApp() {
        if (this.deferredPrompt) {
            this.deferredPrompt.prompt();
            const { outcome } = await this.deferredPrompt.userChoice;
            
            if (outcome === 'accepted') {
                console.log('PWA installed');
                this.isInstalled = true;
                this.updateSettingsButtons();
            }
            
            this.deferredPrompt = null;
        } else {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è —Ä—É—á–Ω–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏
            this.showInstallInstructions();
        }
    }

    showInstallInstructions() {
        const isIOS = /iPad|iPhone|iPod/.test(navigator.userAgent);
        const isAndroid = /Android/.test(navigator.userAgent);
        
        let instructions = '';
        
        if (isIOS) {
            instructions = `
                <div style="text-align: left; line-height: 1.6;">
                    <h4>Installation on iPhone/iPad:</h4>
                    <ol>
                        <li>Tap the "Share" button in Safari</li>
                        <li>Select "Add to Home Screen"</li>
                        <li>Tap "Add"</li>
                    </ol>
                </div>
            `;
        } else if (isAndroid) {
            instructions = `
                <div style="text-align: left; line-height: 1.6;">
                    <h4>Installation on Android:</h4>
                    <ol>
                        <li>Tap browser menu (three dots)</li>
                        <li>Select "Install App" or "Add to Home Screen"</li>
                        <li>Confirm installation</li>
                    </ol>
                </div>
            `;
        } else {
            instructions = `
                <div style="text-align: left; line-height: 1.6;">
                    <h4>Installation on Computer:</h4>
                    <ol>
                        <li>Tap the install icon in the address bar</li>
                        <li>Or use browser menu ‚Üí "Install App"</li>
                    </ol>
                </div>
            `;
        }
        
        // –°–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏
        const modal = document.createElement('div');
        modal.style.cssText = `
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(0, 0, 0, 0.8);
            backdrop-filter: blur(10px);
            z-index: 2000;
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 20px;
        `;
        
        modal.innerHTML = `
            <div style="
                background: #1a1a1a;
                border-radius: 16px;
                padding: 24px;
                max-width: 400px;
                width: 100%;
                border: 1px solid rgba(255, 255, 255, 0.1);
                color: #ffffff;
            ">
                <h3 style="margin: 0 0 16px 0; color: #ff6b35;">Installation Instructions</h3>
                ${instructions}
                <button onclick="this.parentElement.parentElement.remove()" style="
                    width: 100%;
                    padding: 12px;
                    margin-top: 20px;
                    background: #ff6b35;
                    color: white;
                    border: none;
                    border-radius: 8px;
                    font-weight: 600;
                    cursor: pointer;
                ">Got it</button>
            </div>
        `;
        
        document.body.appendChild(modal);
    }

    changeTheme(theme) {
        // –£–¥–∞–ª—è–µ–º –≤—Å–µ –∫–ª–∞—Å—Å—ã —Ç–µ–º
        document.body.classList.remove('light-theme', 'green-theme', 'blue-theme', 'purple-theme', 'red-theme');
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—É—é —Ç–µ–º—É
        if (theme === 'light') {
            this.isDarkTheme = false;
            document.body.classList.add('light-theme');
        } else if (theme === 'green') {
            this.isDarkTheme = true;
            document.body.classList.add('green-theme');
        } else if (theme === 'blue') {
            this.isDarkTheme = true;
            document.body.classList.add('blue-theme');
        } else if (theme === 'purple') {
            this.isDarkTheme = true;
            document.body.classList.add('purple-theme');
        } else if (theme === 'red') {
            this.isDarkTheme = true;
            document.body.classList.add('red-theme');
        } else {
            // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ç–µ–º–Ω–∞—è —Ç–µ–º–∞
            this.isDarkTheme = true;
        }
        
        localStorage.setItem('valutcalc_theme', theme);
    }

    async updateApp() {
        if (!this.updateAvailable || !this.serviceWorkerRegistration) {
            return;
        }

        const updateBtn = document.getElementById('updateBtnSettings');
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
        updateBtn.innerHTML = `
            <svg width="20" height="20" viewBox="0 0 24 24" fill="none" class="updating">
                <path d="M1 4v6h6" stroke="currentColor" stroke-width="2"/>
                <path d="M23 20v-6h-6" stroke="currentColor" stroke-width="2"/>
                <path d="M20.49 9A9 9 0 0 0 5.64 5.64L1 10m22 4l-4.64 4.36A9 9 0 0 1 3.51 15" stroke="currentColor" stroke-width="2"/>
            </svg>
            Updating...
        `;
        updateBtn.disabled = true;

        try {
            // –û—á–∏—â–∞–µ–º –∫–µ—à –±—Ä–∞—É–∑–µ—Ä–∞ –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
            if ('caches' in window) {
                const cacheNames = await caches.keys();
                await Promise.all(
                    cacheNames.map(cacheName => caches.delete(cacheName))
                );
                console.log('Cache cleared before update');
            }
            
            // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º Service Worker
            await this.serviceWorkerRegistration.update();
            
            // –ï—Å–ª–∏ –µ—Å—Ç—å –æ–∂–∏–¥–∞—é—â–∏–π Service Worker, –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –µ–≥–æ
            if (this.serviceWorkerRegistration.waiting) {
                this.serviceWorkerRegistration.waiting.postMessage({ type: 'SKIP_WAITING' });
            }
            
            // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            setTimeout(() => {
                window.location.reload(true); // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞
            }, 1000);
            
        } catch (error) {
            console.error('Update error:', error);
            updateBtn.innerHTML = `
                <svg width="20" height="20" viewBox="0 0 24 24" fill="none">
                    <path d="M1 4v6h6" stroke="currentColor" stroke-width="2"/>
                    <path d="M23 20v-6h-6" stroke="currentColor" stroke-width="2"/>
                    <path d="M20.49 9A9 9 0 0 0 5.64 5.64L1 10m22 4l-4.64 4.36A9 9 0 0 1 3.51 15" stroke="currentColor" stroke-width="2"/>
                </svg>
                Error
            `;
            setTimeout(() => {
                updateBtn.innerHTML = `
                    <svg width="20" height="20" viewBox="0 0 24 24" fill="none">
                        <path d="M1 4v6h6" stroke="currentColor" stroke-width="2"/>
                        <path d="M23 20v-6h-6" stroke="currentColor" stroke-width="2"/>
                        <path d="M20.49 9A9 9 0 0 0 5.64 5.64L1 10m22 4l-4.64 4.36A9 9 0 0 1 3.51 15" stroke="currentColor" stroke-width="2"/>
                    </svg>
                    Update App
                `;
                updateBtn.disabled = false;
            }, 2000);
        }
    }

    setupPWAInstall() {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è beforeinstallprompt
        window.addEventListener('beforeinstallprompt', (e) => {
            e.preventDefault();
            this.deferredPrompt = e;
            this.canInstall = true;
            console.log('PWA can be installed');
        });

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è appinstalled
        window.addEventListener('appinstalled', () => {
            this.isInstalled = true;
            this.canInstall = false;
            this.deferredPrompt = null;
            console.log('PWA installed');
        });

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        if (window.matchMedia('(display-mode: standalone)').matches) {
            this.isInstalled = true;
        }

        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è Android - –µ—Å–ª–∏ —Å–æ–±—ã—Ç–∏–µ beforeinstallprompt –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ
        setTimeout(() => {
            if (!this.isInstalled && !this.canInstall) {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ª–∏ –±—Ä–∞—É–∑–µ—Ä PWA
                const isAndroid = /Android/.test(navigator.userAgent);
                const isChrome = /Chrome/.test(navigator.userAgent);
                
                if (isAndroid && isChrome) {
                    // –ù–∞ Android Chrome –≤—Å–µ–≥–¥–∞ –º–æ–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å PWA –≤—Ä—É—á–Ω—É—é
                    this.canInstall = true;
                    console.log('Android Chrome detected - manual install available');
                }
            }
        }, 2000);
    }

    // –ú–µ—Ç–æ–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–∞–ª—é—Ç–∞–º–∏
    loadSelectedCurrencies() {
        const saved = localStorage.getItem('valutcalc_selected_currencies');
        if (saved) {
            this.selectedCurrencies = JSON.parse(saved);
        }
    }

    saveSelectedCurrencies() {
        localStorage.setItem('valutcalc_selected_currencies', JSON.stringify(this.selectedCurrencies));
    }

    openCurrencySettings() {
        const modal = document.getElementById('currencySettingsModal');
        modal.style.display = 'flex';
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å—Ç–µ–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        this.navigationStack.push(this.currentScreen);
        this.currentScreen = 'currency-settings';
        
        this.updateCurrencySettingsDisplay();
        // –ü–µ—Ä–µ–≤–æ–¥–∏–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        setTimeout(() => {
            this.translateInterface();
            this.translateAllElements();
        }, 50);
    }

    closeCurrencySettings() {
        const modal = document.getElementById('currencySettingsModal');
        modal.style.display = 'none';
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —ç–∫—Ä–∞–Ω—É
        if (this.navigationStack.length > 0) {
            this.currentScreen = this.navigationStack.pop();
        } else {
            this.currentScreen = 'main';
        }
    }

    updateCurrencySettingsDisplay() {
        this.updateCurrentCurrenciesList();
        this.updateAvailableCurrenciesList();
    }

    updateCurrentCurrenciesList() {
        const container = document.getElementById('currentCurrenciesList');
        container.innerHTML = '';

        this.selectedCurrencies.forEach((currencyCode, index) => {
            const currencyName = this.getCurrencyName(currencyCode);
            const currencyItem = document.createElement('div');
            currencyItem.className = 'currency-item draggable-item';
            currencyItem.draggable = true;
            currencyItem.dataset.currency = currencyCode;
            currencyItem.dataset.index = index;
            currencyItem.innerHTML = `
                <div class="currency-item-info">
                    <span class="drag-handle">‚ãÆ‚ãÆ</span>
                    <span class="currency-item-name">${currencyName}</span>
                    <span class="currency-item-code">${currencyCode}</span>
                </div>
                <div class="currency-item-actions">
                    <button class="remove-currency-btn" data-currency="${currencyCode}">√ó</button>
                </div>
            `;
            
            // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ drag & drop
            this.addDragListeners(currencyItem);
            
            // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
            const removeBtn = currencyItem.querySelector('.remove-currency-btn');
            removeBtn.addEventListener('click', (e) => {
                e.stopPropagation(); // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–µ drag & drop
                e.preventDefault();
                this.removeCurrency(currencyCode);
            });
            
            container.appendChild(currencyItem);
        });
    }

    updateAvailableCurrenciesList() {
        const container = document.getElementById('availableCurrenciesList');
        container.innerHTML = '';

        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –≤–∞–ª—é—Ç—ã –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É (–ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é)
        const sortedCurrencies = Object.entries(this.availableCurrencies)
            .filter(([code, name]) => !this.selectedCurrencies.includes(code)) // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –≤–∞–ª—é—Ç—ã
            .sort((a, b) => a[1].localeCompare(b[1])); // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é

        sortedCurrencies.forEach(([code, name]) => {
            const currencyItem = document.createElement('div');
            currencyItem.className = 'currency-item';
            currencyItem.innerHTML = `
                <div class="currency-item-info">
                    <span class="currency-item-name">${name}</span>
                    <span class="currency-item-code">${code}</span>
                </div>
                <div class="currency-item-actions">
                    <button class="add-currency-btn" data-currency="${code}">${this.t('addCurrency')}</button>
                </div>
            `;
            
            // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
            const addBtn = currencyItem.querySelector('.add-currency-btn');
            addBtn.addEventListener('click', (e) => {
                e.stopPropagation(); // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–µ drag & drop
                e.preventDefault();
                this.addCurrency(code);
            });
            
            container.appendChild(currencyItem);
        });
    }

    getCurrencyName(code) {
        return this.availableCurrencies[code] || code;
    }

    removeCurrency(currencyCode) {
        if (this.selectedCurrencies.length <= 1) {
            this.showCustomAlert('You must have at least one currency selected.');
            return;
        }

        this.selectedCurrencies = this.selectedCurrencies.filter(code => code !== currencyCode);
        this.saveSelectedCurrencies();
        this.updateCurrencySettingsDisplay();
        this.updateDisplay();
    }

    addCurrency(currencyCode) {
        // –£–±—Ä–∞–ª–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–ª—é—Ç
        this.selectedCurrencies.push(currencyCode);
        this.saveSelectedCurrencies();
        this.updateCurrencySettingsDisplay();
        this.updateDisplay();
    }

    // –ú–µ—Ç–æ–¥—ã –¥–ª—è drag & drop (desktop) –∏ touch (mobile)
    addDragListeners(item) {
        const dragHandle = item.querySelector('.drag-handle');
        
        if (!dragHandle) return;

        let draggedElement = null;
        let touchStartY = 0;
        let touchCurrentY = 0;
        let isDragging = false;

        // Desktop drag & drop - —Ç–æ–ª—å–∫–æ –Ω–∞ drag handle
        if (dragHandle) {
            dragHandle.addEventListener('dragstart', (e) => {
                e.dataTransfer.effectAllowed = 'move';
                e.dataTransfer.setData('text/html', item.outerHTML);
                item.classList.add('dragging');
            });
        }

        item.addEventListener('dragend', (e) => {
            item.classList.remove('dragging');
        });

        item.addEventListener('dragover', (e) => {
            e.preventDefault();
            e.dataTransfer.dropEffect = 'move';
        });

        item.addEventListener('dragenter', (e) => {
            e.preventDefault();
            item.classList.add('drag-over');
        });

        item.addEventListener('dragleave', (e) => {
            item.classList.remove('drag-over');
        });

        item.addEventListener('drop', (e) => {
            e.preventDefault();
            item.classList.remove('drag-over');
            
            const draggedCurrency = e.dataTransfer.getData('text/html');
            const draggedElement = document.createElement('div');
            draggedElement.innerHTML = draggedCurrency;
            const draggedCurrencyCode = draggedElement.querySelector('.draggable-item').dataset.currency;
            
            if (draggedCurrencyCode !== item.dataset.currency) {
                this.reorderCurrencies(draggedCurrencyCode, item.dataset.currency);
            }
        });

        // Mobile touch events - —Ç–æ–ª—å–∫–æ –Ω–∞ drag handle
        if (dragHandle) {
            dragHandle.addEventListener('touchstart', (e) => {
                e.preventDefault();
                draggedElement = item;
                touchStartY = e.touches[0].clientY;
                touchCurrentY = touchStartY;
                isDragging = false;
                item.classList.add('touch-dragging');
            }, { passive: false });

            dragHandle.addEventListener('touchmove', (e) => {
                e.preventDefault();
                if (!draggedElement) return;
                
                touchCurrentY = e.touches[0].clientY;
                const deltaY = Math.abs(touchCurrentY - touchStartY);
                
                if (deltaY > 10) {
                    isDragging = true;
                    item.classList.add('dragging');
                    
                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∏–∑—É–∞–ª—å–Ω—É—é –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å
                    const allItems = document.querySelectorAll('.draggable-item');
                    allItems.forEach(otherItem => {
                        if (otherItem !== item) {
                            const rect = otherItem.getBoundingClientRect();
                            const itemCenterY = rect.top + rect.height / 2;
                            
                            if (Math.abs(touchCurrentY - itemCenterY) < rect.height / 2) {
                                otherItem.classList.add('drag-over');
                            } else {
                                otherItem.classList.remove('drag-over');
                            }
                        }
                    });
                }
            }, { passive: false });

            dragHandle.addEventListener('touchend', (e) => {
                e.preventDefault();
                if (!draggedElement || !isDragging) {
                    item.classList.remove('touch-dragging');
                    return;
                }

                // –ù–∞—Ö–æ–¥–∏–º —ç–ª–µ–º–µ–Ω—Ç –ø–æ–¥ –∫—É—Ä—Å–æ—Ä–æ–º
                const allItems = document.querySelectorAll('.draggable-item');
                let targetItem = null;
                let minDistance = Infinity;

                allItems.forEach(otherItem => {
                    if (otherItem !== item) {
                        const rect = otherItem.getBoundingClientRect();
                        const itemCenterY = rect.top + rect.height / 2;
                        const distance = Math.abs(touchCurrentY - itemCenterY);
                        
                        if (distance < minDistance && distance < rect.height) {
                            minDistance = distance;
                            targetItem = otherItem;
                        }
                    }
                });

                // –£–±–∏—Ä–∞–µ–º –≤—Å–µ –∫–ª–∞—Å—Å—ã
                allItems.forEach(otherItem => {
                    otherItem.classList.remove('drag-over', 'dragging', 'touch-dragging');
                });

                // –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–µ—É–ø–æ—Ä—è–¥–æ—á–∏–≤–∞–Ω–∏–µ
                if (targetItem && targetItem.dataset.currency !== item.dataset.currency) {
                    this.reorderCurrencies(item.dataset.currency, targetItem.dataset.currency);
                }

                draggedElement = null;
                isDragging = false;
            }, { passive: false });
        }
    }

    reorderCurrencies(draggedCurrency, targetCurrency) {
        const draggedIndex = this.selectedCurrencies.indexOf(draggedCurrency);
        const targetIndex = this.selectedCurrencies.indexOf(targetCurrency);
        
        if (draggedIndex !== -1 && targetIndex !== -1 && draggedIndex !== targetIndex) {
            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤
            const newCurrencies = [...this.selectedCurrencies];
            
            // –£–¥–∞–ª—è–µ–º –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–µ–º—É—é –≤–∞–ª—é—Ç—É
            newCurrencies.splice(draggedIndex, 1);
            
            // –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é
            let newTargetIndex = targetIndex;
            if (draggedIndex < targetIndex) {
                // –ü–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–µ–º –≤–Ω–∏–∑ - –ø–æ–∑–∏—Ü–∏—è —É–º–µ–Ω—å—à–∞–µ—Ç—Å—è –Ω–∞ 1
                newTargetIndex = targetIndex - 1;
            }
            // –ï—Å–ª–∏ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–µ–º –≤–≤–µ—Ä—Ö - –ø–æ–∑–∏—Ü–∏—è –æ—Å—Ç–∞–µ—Ç—Å—è —Ç–æ–π –∂–µ
            
            // –í—Å—Ç–∞–≤–ª—è–µ–º –≤–∞–ª—é—Ç—É –Ω–∞ –Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é
            newCurrencies.splice(newTargetIndex, 0, draggedCurrency);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –º–∞—Å—Å–∏–≤
            this.selectedCurrencies = newCurrencies;
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π –ø–æ—Ä—è–¥–æ–∫
            this.saveSelectedCurrencies();
            this.updateCurrencySettingsDisplay();
            this.updateDisplay();
        }
    }

    showCustomAlert(message) {
        // –°–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º
        const modal = document.createElement('div');
        modal.style.cssText = `
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(0, 0, 0, 0.8);
            backdrop-filter: blur(10px);
            z-index: 3000;
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 20px;
        `;
        
        modal.innerHTML = `
            <div style="
                background: #1a1a1a;
                border-radius: 16px;
                padding: 24px;
                max-width: 400px;
                width: 100%;
                border: 1px solid rgba(255, 255, 255, 0.1);
                color: #ffffff;
                text-align: center;
                box-shadow: 0 20px 40px rgba(0, 0, 0, 0.5);
            ">
                <div style="
                    width: 60px;
                    height: 60px;
                    background: rgba(255, 107, 53, 0.1);
                    border-radius: 50%;
                    display: flex;
                    align-items: center;
                    justify-content: center;
                    margin: 0 auto 20px auto;
                ">
                    <svg width="30" height="30" viewBox="0 0 24 24" fill="none" style="color: #ff6b35;">
                        <path d="M12 9v3.75m-9.303 3.376c-.866 1.5.217 3.374 1.948 3.374h14.71c1.73 0 2.813-1.874 1.948-3.374L13.949 3.378c-.866-1.5-3.032-1.5-3.898 0L2.697 16.126zM12 15.75h.007v.008H12v-.008z" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                    </svg>
                </div>
                <h3 style="margin: 0 0 16px 0; color: #ff6b35; font-size: 18px; font-weight: 600;">Warning</h3>
                <p style="margin: 0 0 24px 0; line-height: 1.5; color: #cccccc;">${message}</p>
                <button onclick="this.parentElement.parentElement.remove()" style="
                    width: 100%;
                    padding: 12px;
                    background: #ff6b35;
                    color: white;
                    border: none;
                    border-radius: 8px;
                    font-weight: 600;
                    cursor: pointer;
                    font-size: 16px;
                    transition: background 0.3s ease;
                " onmouseover="this.style.background='#e55a2b'" onmouseout="this.style.background='#ff6b35'">OK</button>
            </div>
        `;
        
        document.body.appendChild(modal);
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫—Ä—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
        setTimeout(() => {
            if (modal.parentElement) {
                modal.remove();
            }
        }, 5000);
    }

    setupBackButtonHandling() {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–π –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –Ω–∞ Android
        document.addEventListener('backbutton', (event) => {
            event.preventDefault();
            this.handleBackButton();
        }, false);

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ popstate –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–∞
        window.addEventListener('popstate', (event) => {
            event.preventDefault();
            this.handleBackButton();
        });

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∞–≤–∏—à–∏ Escape –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ –¥–µ—Å–∫—Ç–æ–ø–µ
        document.addEventListener('keydown', (e) => {
            if (e.key === 'Escape') {
                e.preventDefault();
                this.handleBackButton();
            }
        });
    }


    handleBackButton() {
        // –ü—Ä–æ—Å—Ç–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
        if (this.currentScreen === 'currency-settings') {
            this.closeCurrencySettings();
        } else if (this.currentScreen === 'settings') {
            this.closeSettings();
        }
        // –ù–∞ –≥–ª–∞–≤–Ω–æ–º —ç–∫—Ä–∞–Ω–µ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
    }


    async refreshExchangeRates() {
        const refreshBtn = document.getElementById('refreshRatesBtn');
        const lastUpdateTime = document.getElementById('lastUpdateTime');
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
        refreshBtn.disabled = true;
        refreshBtn.innerHTML = `
            <svg width="20" height="20" viewBox="0 0 24 24" fill="none" class="rotating">
                <path d="M1 4v6h6" stroke="currentColor" stroke-width="2"/>
                <path d="M23 20v-6h-6" stroke="currentColor" stroke-width="2"/>
                <path d="M20.49 9A9 9 0 0 0 5.64 5.64L1 10m22 4l-4.64 4.36A9 9 0 0 1 3.51 15" stroke="currentColor" stroke-width="2"/>
            </svg>
            <span>Refreshing...</span>
        `;
        lastUpdateTime.textContent = 'Updating...';

        try {
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤—ã–µ –∫—É—Ä—Å—ã
            const response = await fetch('https://api.exchangerate-api.com/v4/latest/USD');
            if (!response.ok) {
                throw new Error('API request failed');
            }

            const data = await response.json();
            this.exchangeRates = data.rates;

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à —Å –Ω–æ–≤—ã–º –≤—Ä–µ–º–µ–Ω–µ–º
            this.cacheRates(this.exchangeRates);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            this.updateDisplay();
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            this.updateLastUpdateTime();
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            refreshBtn.innerHTML = `
                <svg width="20" height="20" viewBox="0 0 24 24" fill="none">
                    <path d="M9 12l2 2 4-4" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                    <circle cx="12" cy="12" r="10" stroke="currentColor" stroke-width="2"/>
                </svg>
                <span>Updated!</span>
            `;
            
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
            setTimeout(() => {
                refreshBtn.innerHTML = `
                    <svg width="20" height="20" viewBox="0 0 24 24" fill="none">
                        <path d="M1 4v6h6" stroke="currentColor" stroke-width="2"/>
                        <path d="M23 20v-6h-6" stroke="currentColor" stroke-width="2"/>
                        <path d="M20.49 9A9 9 0 0 0 5.64 5.64L1 10m22 4l-4.64 4.36A9 9 0 0 1 3.51 15" stroke="currentColor" stroke-width="2"/>
                    </svg>
                    <span>Refresh Exchange Rates</span>
                `;
                refreshBtn.disabled = false;
            }, 2000);
            
        } catch (error) {
            console.error('Error refreshing exchange rates:', error);
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
            refreshBtn.innerHTML = `
                <svg width="20" height="20" viewBox="0 0 24 24" fill="none">
                    <path d="M12 9v3.75m-9.303 3.376c-.866 1.5.217 3.374 1.948 3.374h14.71c1.73 0 2.813-1.874 1.948-3.374L13.949 3.378c-.866-1.5-3.032-1.5-3.898 0L2.697 16.126zM12 15.75h.007v.008H12v-.008z" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                </svg>
                <span>Error</span>
            `;
            lastUpdateTime.textContent = 'Update failed';
            
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
            setTimeout(() => {
                refreshBtn.innerHTML = `
                    <svg width="20" height="20" viewBox="0 0 24 24" fill="none">
                        <path d="M1 4v6h6" stroke="currentColor" stroke-width="2"/>
                        <path d="M23 20v-6h-6" stroke="currentColor" stroke-width="2"/>
                        <path d="M20.49 9A9 9 0 0 0 5.64 5.64L1 10m22 4l-4.64 4.36A9 9 0 0 1 3.51 15" stroke="currentColor" stroke-width="2"/>
                    </svg>
                    <span>Refresh Exchange Rates</span>
                `;
                refreshBtn.disabled = false;
                this.updateLastUpdateTime();
            }, 3000);
        }
    }

    updateLastUpdateTime() {
        const lastUpdateTime = document.getElementById('lastUpdateTime');
        if (!lastUpdateTime) return;

        try {
            const cachedRates = this.getCachedRates();
            if (cachedRates && cachedRates.timestamp) {
                const updateDate = new Date(cachedRates.timestamp);
                const now = new Date();
                const diffMs = now - updateDate;
                const diffMinutes = Math.floor(diffMs / (1000 * 60));
                const diffHours = Math.floor(diffMs / (1000 * 60 * 60));
                const diffDays = Math.floor(diffMs / (1000 * 60 * 60 * 24));

                let timeString;
                if (diffMinutes < 1) {
                    timeString = 'Just now';
                } else if (diffMinutes < 60) {
                    timeString = `${diffMinutes}m ago`;
                } else if (diffHours < 24) {
                    timeString = `${diffHours}h ago`;
                } else {
                    timeString = `${diffDays}d ago`;
                }

                lastUpdateTime.textContent = timeString;
            } else {
                lastUpdateTime.textContent = 'Never updated';
            }
        } catch (error) {
            console.error('Error updating last update time:', error);
            lastUpdateTime.textContent = 'Unknown';
        }
    }

    // –ú–µ—Ç–æ–¥—ã –¥–ª—è –¥–æ–ª–≥–æ–≥–æ –Ω–∞–∂–∞—Ç–∏—è –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é
    setupLongPress(element) {
        let longPressTimer = null;
        let isLongPress = false;
        let startX = 0;
        let startY = 0;

        // Touch —Å–æ–±—ã—Ç–∏—è –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        element.addEventListener('touchstart', (e) => {
            startX = e.touches[0].clientX;
            startY = e.touches[0].clientY;
            isLongPress = false;
            
            longPressTimer = setTimeout(() => {
                isLongPress = true;
                this.showContextMenu(e, element);
            }, 500); // 500ms –¥–ª—è –¥–æ–ª–≥–æ–≥–æ –Ω–∞–∂–∞—Ç–∏—è
        }, { passive: true });

        element.addEventListener('touchmove', (e) => {
            if (longPressTimer) {
                const deltaX = Math.abs(e.touches[0].clientX - startX);
                const deltaY = Math.abs(e.touches[0].clientY - startY);
                
                // –ï—Å–ª–∏ –ø–∞–ª–µ—Ü —Å–¥–≤–∏–Ω—É–ª—Å—è –±–æ–ª—å—à–µ —á–µ–º –Ω–∞ 10px, –æ—Ç–º–µ–Ω—è–µ–º –¥–æ–ª–≥–æ–µ –Ω–∞–∂–∞—Ç–∏–µ
                if (deltaX > 10 || deltaY > 10) {
                    clearTimeout(longPressTimer);
                    longPressTimer = null;
                }
            }
        }, { passive: true });

        element.addEventListener('touchend', (e) => {
            if (longPressTimer) {
                clearTimeout(longPressTimer);
                longPressTimer = null;
            }
            
            // –ï—Å–ª–∏ —ç—Ç–æ –±—ã–ª–æ –¥–æ–ª–≥–æ–µ –Ω–∞–∂–∞—Ç–∏–µ, –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –æ–±—ã—á–Ω—ã–π –∫–ª–∏–∫
            if (isLongPress) {
                e.preventDefault();
                e.stopPropagation();
            }
        });

        // Mouse —Å–æ–±—ã—Ç–∏—è –¥–ª—è –¥–µ—Å–∫—Ç–æ–ø–∞ (–ø—Ä–∞–≤—ã–π –∫–ª–∏–∫)
        element.addEventListener('contextmenu', (e) => {
            e.preventDefault();
            this.showContextMenu(e, element);
        });

        // –î–æ–ª–≥–æ–µ –Ω–∞–∂–∞—Ç–∏–µ –º—ã—à—å—é (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ –¥–µ—Å–∫—Ç–æ–ø–µ)
        element.addEventListener('mousedown', (e) => {
            if (e.button === 0) { // –õ–µ–≤–∞—è –∫–Ω–æ–ø–∫–∞ –º—ã—à–∏
                startX = e.clientX;
                startY = e.clientY;
                isLongPress = false;
                
                longPressTimer = setTimeout(() => {
                    isLongPress = true;
                    this.showContextMenu(e, element);
                }, 500);
            }
        });

        element.addEventListener('mousemove', (e) => {
            if (longPressTimer) {
                const deltaX = Math.abs(e.clientX - startX);
                const deltaY = Math.abs(e.clientY - startY);
                
                if (deltaX > 10 || deltaY > 10) {
                    clearTimeout(longPressTimer);
                    longPressTimer = null;
                }
            }
        });

        element.addEventListener('mouseup', (e) => {
            if (longPressTimer) {
                clearTimeout(longPressTimer);
                longPressTimer = null;
            }
        });

        element.addEventListener('mouseleave', (e) => {
            if (longPressTimer) {
                clearTimeout(longPressTimer);
                longPressTimer = null;
            }
        });
    }

    showContextMenu(event, currencyElement) {
        const contextMenu = document.getElementById('currencyContextMenu');
        const currencyCode = currencyElement.dataset.currency;
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–µ–∫—É—â—É—é –≤–∞–ª—é—Ç—É
        this.contextMenuCurrency = currencyCode;
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∏–∑—É–∞–ª—å–Ω—É—é –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å
        currencyElement.classList.add('long-press-active');
        
        // –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º –º–µ–Ω—é
        let x, y;
        if (event.touches && event.touches[0]) {
            // Touch —Å–æ–±—ã—Ç–∏–µ
            x = event.touches[0].clientX;
            y = event.touches[0].clientY;
        } else {
            // Mouse —Å–æ–±—ã—Ç–∏–µ
            x = event.clientX;
            y = event.clientY;
        }
        
        // –£—á–∏—Ç—ã–≤–∞–µ–º –≥—Ä–∞–Ω–∏—Ü—ã —ç–∫—Ä–∞–Ω–∞
        const menuWidth = 160;
        const menuHeight = 80;
        const screenWidth = window.innerWidth;
        const screenHeight = window.innerHeight;
        
        if (x + menuWidth > screenWidth) {
            x = screenWidth - menuWidth - 10;
        }
        if (y + menuHeight > screenHeight) {
            y = screenHeight - menuHeight - 10;
        }
        
        contextMenu.style.left = x + 'px';
        contextMenu.style.top = y + 'px';
        contextMenu.classList.add('show');
        
        // –£–±–∏—Ä–∞–µ–º –≤–∏–∑—É–∞–ª—å–Ω—É—é –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å —á–µ—Ä–µ–∑ –∫–æ—Ä–æ—Ç–∫–æ–µ –≤—Ä–µ–º—è
        setTimeout(() => {
            currencyElement.classList.remove('long-press-active');
        }, 200);
    }

    hideContextMenu() {
        const contextMenu = document.getElementById('currencyContextMenu');
        contextMenu.classList.remove('show');
        this.contextMenuCurrency = null;
    }

    async copyCurrencyValue() {
        if (!this.contextMenuCurrency) return;
        
        const value = parseFloat(this.currentValue) || 0;
        const convertedValue = this.convertCurrency(value, this.activeCurrency, this.contextMenuCurrency);
        // –ö–æ–ø–∏—Ä—É–µ–º –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –≤—Å—Ç–∞–≤–∫–∏
        const copyValue = convertedValue.toFixed(2);
        
        try {
            await navigator.clipboard.writeText(copyValue);
            this.showCopySuccess();
        } catch (err) {
            // Fallback –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤
            const textArea = document.createElement('textarea');
            textArea.value = copyValue;
            document.body.appendChild(textArea);
            textArea.select();
            document.execCommand('copy');
            document.body.removeChild(textArea);
            this.showCopySuccess();
        }
        
        this.hideContextMenu();
    }

    async pasteCurrencyValue() {
        if (!this.contextMenuCurrency) return;
        
        try {
            const clipboardText = await navigator.clipboard.readText();
            this.handlePastedValue(clipboardText);
        } catch (err) {
            // Fallback –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤
            const textArea = document.createElement('textarea');
            document.body.appendChild(textArea);
            textArea.focus();
            textArea.select();
            
            try {
                document.execCommand('paste');
                this.handlePastedValue(textArea.value);
            } catch (pasteErr) {
                this.showPasteError('Failed to get data from clipboard');
            }
            
            document.body.removeChild(textArea);
        }
        
        this.hideContextMenu();
    }

    handlePastedValue(value) {
        // –£–±–∏—Ä–∞–µ–º –≤—Å–µ –ø—Ä–æ–±–µ–ª—ã –∏ –æ—á–∏—â–∞–µ–º –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
        const cleanValue = value.replace(/\s/g, '').replace(/[^\d.,]/g, '').replace(',', '.');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —á–∏—Å–ª–æ
        const numValue = parseFloat(cleanValue);
        if (isNaN(numValue) || numValue < 0) {
            this.showPasteError(this.t('onlyNumbers'));
            return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å –≤–∞–ª—é—Ç–∞ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏
        if (!this.contextMenuCurrency) {
            this.showPasteError(this.t('noCurrencySelected'));
            return;
        }
        
        // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤–∞–ª—é—Ç—É, –≤ –∫–æ—Ç–æ—Ä—É—é –≤—Å—Ç–∞–≤–ª—è–µ–º
        this.setActiveCurrency(this.contextMenuCurrency);
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        this.currentValue = cleanValue;
        this.hasUserInput = true;
        this.updateDisplay();
        
        this.showPasteSuccess();
    }

    showCopySuccess() {
        this.showToast('Value copied to clipboard', 'success');
    }

    showPasteSuccess() {
        this.showToast('Value pasted successfully', 'success');
    }

    showPasteError(message) {
        this.showToast(message, 'error');
    }

    showToast(message, type = 'info') {
        const toast = document.createElement('div');
        toast.className = `toast toast-${type}`;
        toast.textContent = message;
        
        // –°—Ç–∏–ª–∏ –¥–ª—è toast
        toast.style.cssText = `
            position: fixed;
            top: 20px;
            left: 50%;
            transform: translateX(-50%);
            background: ${type === 'success' ? '#10b981' : type === 'error' ? '#ef4444' : '#3b82f6'};
            color: white;
            padding: 12px 20px;
            border-radius: 8px;
            z-index: 2000;
            font-weight: 500;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
            animation: toastSlideIn 0.3s ease;
        `;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
        const style = document.createElement('style');
        style.textContent = `
            @keyframes toastSlideIn {
                from { opacity: 0; transform: translateX(-50%) translateY(-20px); }
                to { opacity: 1; transform: translateX(-50%) translateY(0); }
            }
        `;
        document.head.appendChild(style);
        
        document.body.appendChild(toast);
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–±–∏—Ä–∞–µ–º —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
        setTimeout(() => {
            toast.style.animation = 'toastSlideIn 0.3s ease reverse';
            setTimeout(() => {
                if (toast.parentElement) {
                    toast.remove();
                }
                if (style.parentElement) {
                    style.remove();
                }
            }, 300);
        }, 3000);
    }

    openSupportModal() {
        const modal = document.getElementById('supportModal');
        if (modal) {
            modal.style.display = 'flex';
            // –ü–µ—Ä–µ–≤–æ–¥–∏–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
            this.translateInterface();
            // –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –ø–æ—è–≤–ª–µ–Ω–∏—è
            setTimeout(() => {
                modal.style.opacity = '1';
            }, 10);
        }
    }

    closeSupportModal() {
        const modal = document.getElementById('supportModal');
        if (modal) {
            modal.style.opacity = '0';
            setTimeout(() => {
                modal.style.display = 'none';
            }, 300);
        }
    }

    // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —è–∑—ã–∫–∞–º–∏
    loadLanguage() {
        const savedLanguage = localStorage.getItem('valutcalc_language');
        if (savedLanguage && (savedLanguage === 'en' || savedLanguage === 'ru')) {
            this.currentLanguage = savedLanguage;
        }
        this.updateLanguageDisplay();
        this.translateInterface();
    }

    saveLanguage(language) {
        localStorage.setItem('valutcalc_language', language);
    }

    setLanguage(language) {
        if (language !== this.currentLanguage) {
            this.currentLanguage = language;
            this.saveLanguage(language);
            this.updateLanguageDisplay();
            
            // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã
            setTimeout(() => {
                this.translateInterface();
                this.translateAllElements();
            }, 100);
        }
    }

    updateLanguageDisplay() {
        const languageBtn = document.getElementById('languageBtn');
        if (!languageBtn) return;
        
        const flag = languageBtn.querySelector('.language-flag');
        const code = languageBtn.querySelector('.language-code');
        
        if (flag && code) {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∞–±–±—Ä–µ–≤–∏–∞—Ç—É—Ä—É —è–∑—ã–∫–∞, –∫–∞–∫ –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ
            const expectedCode = this.currentLanguage === 'ru' ? 'RU' : 'EN';
            
            // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—á–∏—â–∞–µ–º –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            flag.textContent = '';
            code.textContent = '';
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–æ–¥ —è–∑—ã–∫–∞
            code.textContent = expectedCode;
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫ –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ
        document.querySelectorAll('.language-option').forEach(option => {
            option.classList.remove('selected');
            if (option.dataset.lang === this.currentLanguage) {
                option.classList.add('selected');
            }
        });
    }

    translateInterface() {
        // –ü–µ—Ä–µ–≤–æ–¥–∏–º —ç–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        const elements = {
            'refreshRatesBtn': 'refreshRates',
            'lastUpdateLabel': 'lastUpdated',
            'themeLabel': 'theme',
            'aboutLabel': 'about',
            'installBtn': 'installApp',
            'updateBtnSettings': 'updateApp',
            'currencySettingsBtn': 'currencySettings',
            'addCurrencyBtn': 'addCurrency',
            'supportText': 'supportDeveloper',
            'donateDescription': 'donateDescription',
            'koFiBtn': 'koFi',
            'paypalBtn': 'paypal',
            'bitcoinBtn': 'bitcoin'
        };

        for (const [elementId, translationKey] of Object.entries(elements)) {
            const element = document.getElementById(elementId);
            if (element) {
                if (element.tagName === 'BUTTON') {
                    // –î–ª—è –∫–Ω–æ–ø–æ–∫ –∏—â–µ–º span –∏–ª–∏ –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç
                    const span = element.querySelector('span');
                    if (span) {
                        span.textContent = this.translations[this.currentLanguage][translationKey];
                    } else {
                        // –ï—Å–ª–∏ –Ω–µ—Ç span, –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
                        element.textContent = this.translations[this.currentLanguage][translationKey];
                    }
                } else {
                    // –î–ª—è –æ–±—ã—á–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
                    element.textContent = this.translations[this.currentLanguage][translationKey];
                }
            }
        }

        // –ü–µ—Ä–µ–≤–æ–¥–∏–º –∫–Ω–æ–ø–∫–∏ –±–µ–∑ span (Install App, Check for updates)
        const installBtn = document.getElementById('installBtn');
        if (installBtn && installBtn.textContent.includes('Install')) {
            installBtn.textContent = this.translations[this.currentLanguage]['installApp'];
        }

        const updateBtn = document.getElementById('updateBtnSettings');
        if (updateBtn && updateBtn.textContent.includes('Update')) {
            updateBtn.textContent = this.translations[this.currentLanguage]['updateApp'];
        }

        // –ü–µ—Ä–µ–≤–æ–¥–∏–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å–µ–∫—Ü–∏–π
        const sectionHeaders = document.querySelectorAll('.settings-section h3');
        sectionHeaders.forEach(header => {
            const text = header.textContent.trim();
            if (text === 'Application' || text === '–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ') {
                header.textContent = this.translations[this.currentLanguage]['application'];
            } else if (text === 'Theme' || text === '–¢–µ–º–∞') {
                header.textContent = this.translations[this.currentLanguage]['theme'];
            } else if (text === 'About' || text === '–û –ø—Ä–æ–≥—Ä–∞–º–º–µ') {
                header.textContent = this.translations[this.currentLanguage]['about'];
            } else if (text === 'Exchange Rates' || text === '–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç') {
                header.textContent = this.translations[this.currentLanguage]['refreshRates'];
            }
        });

        // –ü–µ—Ä–µ–≤–æ–¥–∏–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å–µ–∫—Ü–∏–π –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –≤–∞–ª—é—Ç
        const currencySettingsSections = document.querySelectorAll('.currency-settings-section h3');
        currencySettingsSections.forEach((header, index) => {
            const text = header.textContent.trim();
            if (text === 'Current Currencies' || text === '–¢–µ–∫—É—â–∏–µ –≤–∞–ª—é—Ç—ã') {
                header.textContent = this.translations[this.currentLanguage]['currentCurrencies'];
            } else if (text === 'Available Currencies' || text === '–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞–ª—é—Ç—ã') {
                header.textContent = this.translations[this.currentLanguage]['availableCurrencies'];
            }
        });

        // –ü–µ—Ä–µ–≤–æ–¥–∏–º –æ–ø—Ü–∏–∏ —Ç–µ–º
        const themeOptions = document.querySelectorAll('.theme-option span:last-child');
        themeOptions.forEach(option => {
            const text = option.textContent.trim();
            if (text === 'Dark' || text === '–¢—ë–º–Ω–∞—è') {
                option.textContent = this.translations[this.currentLanguage]['dark'];
            } else if (text === 'Light' || text === '–°–≤–µ—Ç–ª–∞—è') {
                option.textContent = this.translations[this.currentLanguage]['light'];
            } else if (text === 'Green' || text === '–ó–µ–ª—ë–Ω–∞—è') {
                option.textContent = this.translations[this.currentLanguage]['green'];
            } else if (text === 'Blue' || text === '–°–∏–Ω—è—è') {
                option.textContent = this.translations[this.currentLanguage]['blue'];
            } else if (text === 'Purple' || text === '–§–∏–æ–ª–µ—Ç–æ–≤–∞—è') {
                option.textContent = this.translations[this.currentLanguage]['purple'];
            } else if (text === 'Red' || text === '–ö—Ä–∞—Å–Ω–∞—è') {
                option.textContent = this.translations[this.currentLanguage]['red'];
            }
        });

        // –ü–µ—Ä–µ–≤–æ–¥–∏–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —è–∑—ã–∫–∞
        const languageModalTitle = document.querySelector('.language-modal-header h2');
        if (languageModalTitle) {
            languageModalTitle.textContent = this.translations[this.currentLanguage]['selectLanguage'];
        }

        // –ü–µ—Ä–µ–≤–æ–¥–∏–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤–∞–ª—é—Ç
        const currencySettingsTitle = document.querySelector('.currency-settings-header h2');
        if (currencySettingsTitle) {
            currencySettingsTitle.textContent = this.translations[this.currentLanguage]['currencySettings'];
        }


        // –ü–µ—Ä–µ–≤–æ–¥–∏–º –∫–Ω–æ–ø–∫–∏ "Add" –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –≤–∞–ª—é—Ç
        const addButtons = document.querySelectorAll('.add-currency-btn');
        addButtons.forEach(button => {
            button.textContent = this.translations[this.currentLanguage]['addCurrency'];
        });

        // –ü–µ—Ä–µ–≤–æ–¥–∏–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
        const supportFooter = document.querySelector('.support-footer p');
        if (supportFooter) {
            supportFooter.textContent = this.translations[this.currentLanguage]['thankYou'];
        }

        const cryptoSubtitle = document.querySelector('.support-subtitle');
        if (cryptoSubtitle && cryptoSubtitle.textContent.includes('Crypto')) {
            cryptoSubtitle.textContent = this.translations[this.currentLanguage]['cryptoDonation'];
        }
    }

    openLanguageModal() {
        const modal = document.getElementById('languageModal');
        modal.classList.add('show');
        
        // –ü–µ—Ä–µ–≤–æ–¥–∏–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        setTimeout(() => {
            this.translateInterface();
            this.translateAllElements();
        }, 50);
    }

    closeLanguageModal() {
        const modal = document.getElementById('languageModal');
        modal.classList.remove('show');
    }

    t(key) {
        return this.translations[this.currentLanguage][key] || key;
    }

    translateAllElements() {
        // –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤—Å–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ h3
        const h3Elements = document.querySelectorAll('h3');
        h3Elements.forEach(element => {
            const text = element.textContent.trim();
            switch (text) {
                case 'Application':
                case '–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ':
                    element.textContent = this.t('application');
                    break;
                case 'Theme':
                case '–¢–µ–º–∞':
                    element.textContent = this.t('theme');
                    break;
                case 'About':
                case '–û –ø—Ä–æ–≥—Ä–∞–º–º–µ':
                    element.textContent = this.t('about');
                    break;
                case 'Exchange Rates':
                case '–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç':
                    element.textContent = this.t('refreshRates');
                    break;
                case 'Current Currencies':
                case '–¢–µ–∫—É—â–∏–µ –≤–∞–ª—é—Ç—ã':
                    element.textContent = this.t('currentCurrencies');
                    break;
                case 'Available Currencies':
                case '–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞–ª—é—Ç—ã':
                    element.textContent = this.t('availableCurrencies');
                    break;
            }
        });

        // –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤—Å–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ h2
        const h2Elements = document.querySelectorAll('h2');
        h2Elements.forEach(element => {
            const text = element.textContent.trim();
            switch (text) {
                case 'Settings':
                case '–ù–∞—Å—Ç—Ä–æ–π–∫–∏':
                    element.textContent = this.t('settings');
                    break;
                case 'Currency Settings':
                case '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∞–ª—é—Ç':
                    element.textContent = this.t('currencySettings');
                    break;
                case 'Select Language':
                case '–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫':
                    element.textContent = this.t('selectLanguage');
                    break;
            }
        });

        // –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏
        const buttons = document.querySelectorAll('button');
        buttons.forEach(button => {
            const text = button.textContent.trim();
            const span = button.querySelector('span');
            
            switch (text) {
                case 'Install App':
                case '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ':
                    if (span) span.textContent = this.t('installApp');
                    else button.textContent = this.t('installApp');
                    break;
                case 'Check for updates':
                case '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è':
                    if (span) span.textContent = this.t('checkUpdates');
                    else button.textContent = this.t('checkUpdates');
                    break;
                case 'Update App':
                case '–û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ':
                    if (span) span.textContent = this.t('updateApp');
                    else button.textContent = this.t('updateApp');
                    break;
                case 'Currency Settings':
                case '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∞–ª—é—Ç':
                    if (span) span.textContent = this.t('currencySettings');
                    else button.textContent = this.t('currencySettings');
                    break;
                case 'Refresh Exchange Rates':
                case '–û–±–Ω–æ–≤–∏—Ç—å –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç':
                    if (span) span.textContent = this.t('refreshRates');
                    else button.textContent = this.t('refreshRates');
                    break;
                case 'Add':
                case '–î–æ–±–∞–≤–∏—Ç—å –≤–∞–ª—é—Ç—É':
                    button.textContent = this.t('addCurrency');
                    break;
            }
        });

        // –ü–µ—Ä–µ–≤–æ–¥–∏–º –¥—Ä—É–≥–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        const spans = document.querySelectorAll('span');
        spans.forEach(span => {
            const text = span.textContent.trim();
            if (text === 'Last updated:' || text === '–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:') {
                span.textContent = this.t('lastUpdated');
            }
        });

        const paragraphs = document.querySelectorAll('p');
        paragraphs.forEach(p => {
            const text = p.textContent.trim();
            if (text.includes('Thank you for your support!') || text.includes('üôè –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É!')) {
                p.textContent = this.t('thankYou');
            }
        });
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
let app;
document.addEventListener('DOMContentLoaded', () => {
    app = new ValutCalc();
});

// Service Worker —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è - –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
/*
if ('serviceWorker' in navigator) {
    window.addEventListener('load', () => {
        navigator.serviceWorker.register('sw.js')
            .then(registration => {
                console.log('SW registered:', registration);
            })
            .catch(registrationError => {
                console.log('SW registration failed:', registrationError);
            });
    });
}
*/
